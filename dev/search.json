[{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"adding-layers","dir":"Articles","previous_headings":"","what":"Adding layers","title":"Changing generated code","text":"plots returned make_shape_plot() forest_plot() ggplot objects, can use + add layers adjust theme.","code":"forest <- forest_plot(panels         = list(resultsA, resultsB),                       col.key        = \"variable\",                       panel.headings = c(\"Analysis A\", \"Analysis B\"),                       showcode       = FALSE,                       printplot      = FALSE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details.  forest$plot +   annotate(geom = \"segment\",            x = 0.71,            y = 1,            xend = 1.4,            yend = 1) +   annotate(geom = \"polygon\",            x = c(0.85, 1.37, 1.37, 0.85),            y = c(-0.5, -0.5, -1.5, -1.5),            fill = NA,            colour = \"orange\") +   theme(plot.background = element_rect(fill = \"lightblue\"))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"adding-code-the-addcode-argument","dir":"Articles","previous_headings":"","what":"Adding code (the addcode argument)","title":"Changing generated code","text":"addcode argument make_shape_plot() forest_plot() can used add additional code plot code created functions. argument character vector. first element defines code added. matched (regular expression) first line generated code (trimmed whitespace). remaining elements inserted code just line. example, insert code line “# Plot points transformed estimates”, set “# Plot points transformed estimates” first element.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"example","dir":"Articles","previous_headings":"Adding code (the addcode argument)","what":"Example","title":"Changing generated code","text":"wish use geom_segment() add dashed lines plot, added plot point estimates:","code":"forest_plot(panels         = list(resultsA, resultsB),             col.key        = \"variable\",             panel.headings = c(\"Analysis A\", \"Analysis B\"),             exponentiate   = TRUE,             colour = \"grey\",             addcode = c(\"# Plot points at the transformed estimates\",                         \"# Plot dashed line\",                         \"geom_segment(aes(x = estimate_transformed, xend = estimate_transformed, y= -row, yend = -1),\",                         \"linetype = 'dashed',\",                         \"data = ~ dplyr::filter(.,row.label=='nmr_s_vldl_tg')) +\",                         \"\")) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"adding-aesthetics-and-arguments-the-addaes-and-addarg-arguments","dir":"Articles","previous_headings":"","what":"Adding aesthetics and arguments (the addaes and addarg arguments)","title":"Changing generated code","text":"addaes addarg arguments make_shape_plot() forest_plot() can used add additional aesthetics arguments code ggplot layers created functions. arguments must named lists character strings, names elements defines aesthetics/arguments code added. make_shape_plot() following names add aesthetics arguments layers: forest_plot() following names add aesthetics arguments layers: duplicate aesthetics/arguments might defined created, kept priority: Aesthetic arguments specified using addaes addarg Aesthetic arguments created function arguments specified using addaes addarg arguments created function can used ‘overwrite’ code otherwise produced make_shape_plot() forest_plot().","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"example-1","dir":"Articles","previous_headings":"Adding aesthetics and arguments (the addaes and addarg arguments)","what":"Example","title":"Changing generated code","text":"","code":"forest_plot(panels         = list(resultsA, resultsB),             col.key        = \"variable\",             panel.headings = c(\"Analysis A\", \"Analysis B\"),             ciunder        = TRUE,             addarg = list(panel.name = \"colour = 'red'\"),             addaes = list(point = \"colour = dplyr::if_else(estimate_transformed > 1.01, 'orange', 'grey')\")) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"changing-the-code-vector-and-evaluating","dir":"Articles","previous_headings":"","what":"Changing the code vector and evaluating","title":"Changing generated code","text":"make_shape_plot() forest_plot() functions return plot code character vector. change elements vector customise code, parse evaluate using eval(parse(text = plotcode)).","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/adding_editing_code.html","id":"copying-the-plot-code","dir":"Articles","previous_headings":"","what":"Copying the plot code","title":"Changing generated code","text":"want make many changes plot code, can also copy paste code Viewer pane.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"shape-plots","dir":"Articles","previous_headings":"","what":"Shape plots","title":"Get started with ckbplotr","text":"shape_plot() creates plot estimates CIs risk factor levels using ggplot2 package. function returns plot ggplot2 code used create plot. RStudio ggplot2 code used create plot shown Viewer pane (syntax highlighting highlights package installed). function uses plot_like_ckb() modify theme control look plot.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"example-data","dir":"Articles","previous_headings":"Shape plots","what":"Example data","title":"Get started with ckbplotr","text":"","code":"ckbplotr_shape_data #>    est   se   rf   n is_female #> 1 1.00 0.08 20.0 109         0 #> 2 1.25 0.03 28.0 103         0 #> 3 1.50 0.07 38.0 143         0 #> 4 1.75 0.15 50.0 104         0 #> 5 1.70 0.08 18.5 140         1 #> 6 1.85 0.08 25.0 134         1 #> 7 2.25 0.07 37.0 127         1 #> 8 2.60 0.10 47.0  99         1"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"simple-example","dir":"Articles","previous_headings":"Shape plots","what":"Simple example","title":"Get started with ckbplotr","text":"Given data frame estimates standard errors (plotted y axis), risk factor levels (plotted x axis), plot can created.  details customising forest plots, see “shape plots”.","code":"shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            xlims        = c(15, 50),            ylims        = c(0.5, 3),            scalepoints  = TRUE) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"forest-plots","dir":"Articles","previous_headings":"","what":"Forest plots","title":"Get started with ckbplotr","text":"forest_plot() creates forest plot using ggplot2 graphics package. function returns plot ggplot2 code used create plot. RStudio code used create plot shown Viewer pane (syntax highlighting highlights package installed). Narrow confidence interval lines may become hidden forest plots. Please check final output carefully see “Confidence interval lines forest plots” methods handle .","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"prepare-data","dir":"Articles","previous_headings":"Forest plots","what":"Prepare data","title":"Get started with ckbplotr","text":"First , analyses put results data frames (one data frame forest plot panel). take subsets example data provided package.","code":"resultsA <- dplyr::filter(ckbplotr_forest_data, name == \"A\") resultsB <- dplyr::filter(ckbplotr_forest_data, name == \"B\")  head(resultsA[,c(\"variable\", \"estimate\", \"stderr\", \"n\")]) #>       variable     estimate     stderr    n #> 1 nmr_l_vldl_p  0.007652073 0.03020935  407 #> 2 nmr_m_vldl_p  0.006110668 0.02475996 1816 #> 3 nmr_s_vldl_p -0.028511316 0.04000646  812 #> 4    nmr_idl_p  0.004209247 0.01336079  938 #> 5  nmr_l_ldl_p  0.001505025 0.01589807  800 #> 6  nmr_m_ldl_p  0.011208151 0.02168255  423"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"simple-forest-plot","dir":"Articles","previous_headings":"Forest plots","what":"Simple forest plot","title":"Get started with ckbplotr","text":"panels argument list data frames results plotted, col.key argument name column defines results plotted row, exponentiate argument logical value telling function providing estimates log scale. default, function assumes estimates standard errors columns named “estimate” “stderr”, can also set col.estimate col.stderr arguments.","code":"forest_plot(panels       = list(resultsA, resultsB),             col.key      = \"variable\",             exponentiate = TRUE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"using-row-labels","dir":"Articles","previous_headings":"Forest plots","what":"Using row labels","title":"Get started with ckbplotr","text":"use row labels, first create data frame labels. data set must contain: column used match labels correct results, specified argument col.key. three columns headings/subheadings/labels rows. particular level label required can set missing. forest_plot() specify row.labels argument data frame labels ’ve created. Use row.labels.levels argument choose columns used headings/subheadings/labels. Use rows argument choose results plotted. first level (heading) labels included plot top bottom. labels order row.labels data frame.  plot ’ve also use panel.headings, xlim, xticks, scalepoints, pointsize arguments customise plot. details customising forest plots, see “forest plots”.","code":"head(ckbplotr_row_labels) #>                              heading subheading  label     variable #> 1 Lipoprotein particle concentration       VLDL  Large nmr_l_vldl_p #> 2 Lipoprotein particle concentration       VLDL Medium nmr_m_vldl_p #> 3 Lipoprotein particle concentration       VLDL  Small nmr_s_vldl_p #> 4 Lipoprotein particle concentration        IDL   <NA>    nmr_idl_p #> 5 Lipoprotein particle concentration        LDL  Large  nmr_l_ldl_p #> 6 Lipoprotein particle concentration        LDL Medium  nmr_m_ldl_p forest_plot(panels            = list(resultsA, resultsB),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Triglycerides concentration\",                                   \"Lipoprotein particle concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\", \"Analysis B\"),             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             scalepoints       = TRUE,             pointsize         = 3) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"other-plots","dir":"Articles","previous_headings":"","what":"Other plots","title":"Get started with ckbplotr","text":"Supply existing ggplot2 plot plot argument plot_like_ckb():  See “Make ggplot like CKB plot” details.","code":"plot <- ggplot(data = mpg,                aes(x = displ, y = hwy)) +   geom_point(size = 1)  ckbplot <- plot_like_ckb(plot = plot,                          xlims = c(0, 8),                          ylims = c(10, 50))  gridExtra::grid.arrange(plot, ckbplot, ncol = 2)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/ckbplotr.html","id":"confidence-intervals","dir":"Articles","previous_headings":"","what":"Confidence intervals","title":"Get started with ckbplotr","text":"standard errors supplied shape_plot() forest_plot() functions, confidence intervals calculated 95% confidence intervals using Normal approximation method (critical value 1.96).","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_confidence_intervals.html","id":"changing-the-colour","dir":"Articles","previous_headings":"","what":"Changing the colour","title":"Confidence interval lines in forest plots","text":"plot narrow confidence widths different colour, set panel.width argument forest_plot() equal width panel final drawn output. cicolour argument also character vector - last element used narrow confidence intervals. use fix_panel() function, first argument plot just created second panel width. function returns gtable object, can plotted using grid::grid.draw (plot()). panels widths fixed. Notes: designed work well shape 15 (default) 22. calculation sizes (accounting stroke aesthetic) may entirely accurate, check output change plot.width argument needed. Confidence intervals assumed centred point estimate.  cicolour argument can vector names colours, names columns (contain colour names).","code":"resultsA <- dplyr::filter(ckbplotr_forest_data, name == \"A\") resultsB <- dplyr::filter(ckbplotr_forest_data, name == \"B\")  forestplot <- forest_plot(   panels            = list(resultsA, resultsB),   col.key           = \"variable\",   row.labels        = ckbplotr_row_labels,   row.labels.levels = c(\"heading\", \"subheading\", \"label\"),   rows              = c(\"Lipoprotein particle concentration\"),   exponentiate      = TRUE,   panel.names       = c(\"Analysis A\", \"Analysis B\"),   ci.delim          = \" - \",   xlim              = c(0.9, 1.1),   xticks            = c(0.9, 1, 1.1),   blankrows         = c(1, 1, 0, 1),   scalepoints       = TRUE,   pointsize         = 8,   col.left          = c(\"n\"),   col.left.heading  = c(\"No. of\\nevents\"),   col.heading.space = 0,      # set panel width + CI colours   panel.width       = 18,   cicolour          = c(\"black\", \"white\"),   printplot         = FALSE)  plot <- fix_panel(forestplot$plot, width = unit(18, \"mm\")) grid::grid.draw(plot)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_confidence_intervals.html","id":"plotting-lines-under-or-over-points","dir":"Articles","previous_headings":"","what":"Plotting lines under or over points","title":"Confidence interval lines in forest plots","text":"well changing colour, may also wish change confidence interval lines plotted point estimates. can done using panel.width argument using logical (character) vector ciunder argument.","code":"forestplot <- forest_plot(   panels            = list(resultsA, resultsB),   col.key           = \"variable\",   row.labels        = ckbplotr_row_labels,   row.labels.levels = c(\"heading\", \"subheading\", \"label\"),   rows              = c(\"Lipoprotein particle concentration\"),   exponentiate      = TRUE,   panel.names       = c(\"Analysis A\", \"Analysis B\"),   ci.delim          = \" - \",   xlim              = c(0.9, 1.1),   xticks            = c(0.9, 1, 1.1),   blankrows         = c(1, 1, 0, 1),   scalepoints       = TRUE,   pointsize         = 8,   col.left          = c(\"n\"),   col.left.heading  = c(\"No. of\\nevents\"),      # set panel width + CI under or over   panel.width       = 18,   shape             = 22,   stroke            = 0.5,   fill              = \"white\",   ciunder           = c(TRUE, FALSE),   printplot         = FALSE)  plot <- fix_panel(forestplot$plot, width = unit(18, \"mm\")) grid::grid.draw(plot)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_confidence_intervals.html","id":"changing-colour-and-plotting-of-lines","dir":"Articles","previous_headings":"","what":"Changing colour and plotting of lines","title":"Confidence interval lines in forest plots","text":"using panel.width, cicolour can list vectors colour names. fill can also list colour names.","code":"resultsA <- dplyr::filter(ckbplotr_forest_data, name == \"A\") resultsB <- dplyr::filter(ckbplotr_forest_data, name == \"B\")   forestplot <- forest_plot(   panels            = list(resultsA, resultsB),   col.key           = \"variable\",   row.labels        = ckbplotr_row_labels,   row.labels.levels = c(\"heading\", \"subheading\", \"label\"),   rows              = c(\"Lipoprotein particle concentration\"),   exponentiate      = TRUE,   panel.names       = c(\"Analysis A\", \"Analysis B\"),   ci.delim          = \" - \",   xlim              = c(0.9, 1.1),   xticks            = c(0.9, 1, 1.1),   blankrows         = c(1, 1, 0, 1),   scalepoints       = TRUE,   pointsize         = 8,   col.left          = c(\"n\"),   col.left.heading  = c(\"No. of\\nevents\"),      # set panel width + CI and fill colours   panel.width       = 18,   stroke            = 0.5,   shape             = 22,   fill              = list(\"black\", \"white\"),   cicolour          = list(c(\"black\", \"white\"), c(\"black\", \"black\")),   ciunder           = c(TRUE, FALSE),   printplot         = FALSE)  plot <- fix_panel(forestplot$plot, width = unit(18, \"mm\")) grid::grid.draw(plot)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"adding-columns-of-text","dir":"Articles","previous_headings":"","what":"Adding columns of text","title":"Forest plots","text":"Use col.left col.right arguments add columns text either side panel. Use col.left.heading col.right.heading customise column headings.  Multiple columns can added specifying vectors col.left, col.right, col.left.heading col.right.heading.  col.left.hjust col.right.hjust arguments set horizontal justification columns (0 = left, 0.5 = center , 1 = right).","code":"resultsA <- dplyr::filter(ckbplotr_forest_data, name == \"A\") resultsB <- dplyr::filter(ckbplotr_forest_data, name == \"B\")  forest_plot(panels            = list(resultsA, resultsB),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Triglycerides concentration\",                                   \"Lipoprotein particle concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\", \"Analysis B\"),             ci.delim          = \" - \",             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             blankrows         = c(1, 1, 0, 1),             scalepoints       = TRUE,             pointsize         = 3,             col.left          = c(\"n\"),             col.left.heading  = c(\"No. of\\nevents\"),             col.heading.space = 1.5) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details. forest_plot(panels            = list(resultsA, resultsB),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Triglycerides concentration\",                                   \"Lipoprotein particle concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\", \"Analysis B\"),             ci.delim          = \" - \",             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             blankrows         = c(1, 1, 0, 1),             scalepoints       = TRUE,             pointsize         = 3,             col.left          = c(\"nb\", \"n\"),             col.left.heading  = c(\"Some other\\nnumbers\", \"No. of\\nevents\"),             col.right         = \"n\",             col.right.heading = c(\"HR\", \"N\"),             col.heading.space = 1.5) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":[]},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"horizontal","dir":"Articles","previous_headings":"Spacing","what":"Horizontal","title":"Forest plots","text":"function attempts set positions columns text spacing automatically. produce satisfactory layout, can use arguments col.left.pos, col.right.pos, left.space, right.space, mid.space control positions spacing manually.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"vertical","dir":"Articles","previous_headings":"Spacing","what":"Vertical","title":"Forest plots","text":"plot fill vertical space available. Use plot.margin change top bottom margins needed.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"plot-colour","dir":"Articles","previous_headings":"","what":"Plot colour","title":"Forest plots","text":"colour used plot can changed plotcolour argument. can useful create plots fit colour scheme (use dark grey less contrast viewing screen projector). See next section details customising colour(s) point confidence interval lines.","code":"forest_plot(panels            = list(resultsA, resultsB),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Triglycerides concentration\",                                   \"Lipoprotein particle concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\", \"Analysis B\"),             ci.delim          = \" - \",             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             blankrows         = c(1, 1, 0, 1),             scalepoints       = TRUE,             pointsize         = 3,             plotcolour        = \"navyblue\") #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"setting-colours-and-shapes-bold-text-and-diamonds","dir":"Articles","previous_headings":"","what":"Setting colours and shapes, bold text and diamonds","title":"Forest plots","text":"shape fill colour points, colour points confidence interval lines, bold text, estimates/CIs plotted diamonds can set overall per-point basis. done setting arguments shape, colour, fill, ciunder, col.bold, col.diamond appropriate values, name column containing values point. argument/columns, control, type: Note col.bold, col.diamond must column names supplied data frames, others can fixed values column names.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"using-values","dir":"Articles","previous_headings":"Setting colours and shapes, bold text and diamonds","what":"Using values","title":"Forest plots","text":"","code":"forest_plot(panels           = list(resultsA),             col.key          = \"variable\",             row.labels       = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows             = c(\"Triglycerides concentration\"),             exponentiate     = TRUE,             panel.names      = c(\"Analysis A\"),             blankrows        = c(0, 1, 0, 1),             scalepoints      = TRUE,             pointsize        = 3,             shape            = 16,             colour           = \"red\",             cicolour         = \"black\",             ciunder          = TRUE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"using-column-names","dir":"Articles","previous_headings":"Setting colours and shapes, bold text and diamonds","what":"Using column names","title":"Forest plots","text":"parameter set, default values used aesthetics. parameter set, every data frame provided cols must contain column name.","code":"resultsA[9,\"shape\"] <- 16 resultsA[10, \"bold\"] <- TRUE resultsA[11, \"colour\"] <- \"red\" resultsA[12, \"diamond\"] <- TRUE resultsA[13, \"ciunder\"] <- TRUE resultsA[13, \"shape\"] <- 22 resultsA[13, \"fill\"] <- \"white\"  forest_plot(panels           = list(resultsA),             col.key          = \"variable\",             row.labels       = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows             = c(\"Triglycerides concentration\"),             exponentiate     = TRUE,             panel.names      = c(\"Analysis A\"),             blankrows        = c(0, 1, 0, 1),             scalepoints      = TRUE,             pointsize        = 3,             shape            = \"shape\",             colour           = \"colour\",             col.bold         = \"bold\",             col.diamond      = \"diamond\",             ciunder          = \"ciunder\") #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"diamond-shortcut","dir":"Articles","previous_headings":"Setting colours and shapes, bold text and diamonds","what":"Diamond shortcut","title":"Forest plots","text":"alternative using col.diamond, provide character vector diamond argument. rows key values, estimates CIs plotted using diamond. (list supplied, first element used.)","code":"forest_plot(panels           = list(resultsA),             col.key          = \"variable\",             row.labels       = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows             = c(\"Triglycerides concentration\"),             exponentiate     = TRUE,             panel.names      = c(\"Analysis A\"),             ci.delim         = \" - \",             blankrows        = c(0, 1, 0, 1),             scalepoints      = TRUE,             pointsize        = 3,             col.left         = c(\"n\"),             col.left.heading = c(\"No. of\\nevents\"),             diamond          = c(\"nmr_l_ldl_tg\", \"nmr_m_ldl_tg\")) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"adding-heterogeneity-and-trend-test-results-and-other-text","dir":"Articles","previous_headings":"","what":"Adding heterogeneity and trend test results and other text","title":"Forest plots","text":"addtext argument can used add results heterogeneity trend tests, text, text column estimates CIs. automatic positioning columns spacing panels take account additional text, may need use right.space col.right.pos arguments satisfactory layout.  add multiple tests results /text row, use separate addtext data frames:","code":"resultsA_extra #>       variable het_dof het_stat het_p trend_stat trend_p #> 1  nmr_s_ldl_p       2       12 =0.22       <NA>    <NA> #> 2 nmr_s_vldl_p    <NA>     <NA>  <NA>          7   =0.31 resultsB_extra #>       variable het_dof het_stat het_p trend_stat trend_p #> 1  nmr_s_ldl_p       2       14 =0.32       <NA>    <NA> #> 2 nmr_s_vldl_p    <NA>     <NA>  <NA>          7   =0.83 forest_plot(panels            = list(resultsA, resultsB),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Lipoprotein particle concentration\",                                   \"Triglycerides concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\", \"Analysis B\"),             ci.delim          = \" - \",             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             blankrows         = c(1, 0, 0, 1),             scalepoints       = TRUE,             pointsize         = 3,             col.left          = c(\"n\"),             col.left.heading  = c(\"No. of\\nevents\"),             col.heading.space = 1.5,             addtext           = list(resultsA_extra, resultsB_extra),             right.space       = unit(35, \"mm\")) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details. resultsA_extra #>      variable het_dof het_stat het_p trend_stat trend_p #> 1 nmr_s_ldl_p       2       12 =0.22       <NA>    <NA> #> 2 nmr_s_ldl_p    <NA>     <NA>  <NA>          7   =0.31 forest_plot(panels            = list(resultsA),             col.key           = \"variable\",             row.labels        = ckbplotr_row_labels,             row.labels.levels = c(\"heading\", \"subheading\", \"label\"),             rows              = c(\"Lipoprotein particle concentration\"),             exponentiate      = TRUE,             panel.headings    = c(\"Analysis A\"),             ci.delim          = \" - \",             xlim              = c(0.9, 1.1),             xticks            = c(0.9, 1, 1.1),             blankrows         = c(1, 0, 0, 1),             scalepoints       = TRUE,             pointsize         = 3,             col.left          = c(\"n\"),             col.left.heading  = c(\"No. of\\nevents\"),             col.heading.space = 1.5,             addtext           = list(resultsA_extra),             right.space       = unit(35, \"mm\")) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"different-limits-and-ticks-on-each-plot","dir":"Articles","previous_headings":"","what":"Different limits and ticks on each plot","title":"Forest plots","text":"forest_plot() uses ggplot facets place forest plots side--side. Facets easily different scales (limits ticks) applied, ’s directly possible different limits ticks forest plot. However, one approach work around use forest_plot() plot need, remove labels first, arrange side--side. gridExtra package can used last step. Step 1: Use forest_plot() plot. Step 2: Remove axis text first plot. Step 3: Arrange plots using gridExtra (may packages also work), using fix_panel() set width panels. (Adjust widths argument get suitable layout.)  Note scalepoints = TRUE (minse specified plot) scaling plot--plot basis box sizes comparable plots. However, different axis scales used confidence intervals comparable either may problem.","code":"forestplot1 <- forest_plot(panels            = list(resultsA),                            col.key           = \"variable\",                            row.labels        = ckbplotr_row_labels,                            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),                            rows              = c(\"Lipoprotein particle concentration\",                                                  \"Triglycerides concentration\"),                            exponentiate      = TRUE,                            panel.names       = c(\"Analysis A\"),                            ci.delim          = \" - \",                            xlim              = c(0.9, 1.1),                            xticks            = c(0.9, 1, 1.1),                            blankrows         = c(1, 1, 0, 1),                            scalepoints       = TRUE,                            pointsize         = 3,                            col.left          = c(\"n\"),                            col.left.heading  = c(\"No. of\\nevents\"),                            col.heading.space = 1.5,                            printplot         = FALSE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details.  forestplot2 <- forest_plot(panels            = list(resultsB),                            col.key           = \"variable\",                            row.labels        = ckbplotr_row_labels,                            row.labels.levels = c(\"heading\", \"subheading\", \"label\"),                            rows              = c(\"Lipoprotein particle concentration\",                                                  \"Triglycerides concentration\"),                            exponentiate      = TRUE,                            panel.names       = c(\"Analysis B\"),                            ci.delim          = \" - \",                            xlim              = c(0.8, 1.2),                            xticks            = c(0.8, 1, 1.2),                            blankrows         = c(1, 1, 0, 1),                            scalepoints       = TRUE,                            pointsize         = 3,                            col.left          = c(\"n\"),                            col.left.heading  = c(\"No. of\\nevents\"),                            col.heading.space = 1.5,                            printplot         = FALSE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details. p1 <- forestplot1$plot  p2 <- forestplot2$plot +    theme(axis.text.y = element_blank()) gridExtra::grid.arrange(fix_panel(p1, width = unit(20, \"mm\")),                         fix_panel(p2, width = unit(20, \"mm\")),                         nrow = 1,                         widths = c(1, 0.5))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/forest_plot.html","id":"stroke","dir":"Articles","previous_headings":"","what":"Stroke","title":"Forest plots","text":"stroke argument sets stroke aesthetic plotted shapes. See https://ggplot2.tidyverse.org/articles/ggplot2-specs.html details. stroke size adds total size shape, unless stroke = 0 scaling size inverse variance slightly inaccurate (probably important things worry ).","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/page_layouts.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Page layouts","text":"Using grid gridExtra packages gives lot control may need work create desired output. example placing two plots side--side.","code":"library(ckbplotr) #> Loading required package: ggplot2 #> Please check NEWS.md, help files and vignettes for latest changes to the package.  # Make the plots, with suitable margins shapeplot <- shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],                         col.x        = \"rf\",                         col.estimate = \"est\",                         col.stderr   = \"se\",                         col.n        = \"n\",                         xlims        = c(15, 50),                         ylims        = c(0.5, 3),                         scalepoints  = TRUE,                         title        = NULL,                         printplot    = FALSE) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details.  resultsA <- dplyr::filter(ckbplotr_forest_data, name == \"A\") forestplot <- forest_plot(panels            = list(resultsA),                           col.key           = \"variable\",                           row.labels        = ckbplotr_row_labels,                           row.labels.levels = c(\"heading\", \"subheading\", \"label\"),                           rows              = c(\"Triglycerides concentration\",                                                 \"Lipoprotein particle concentration\"),                           exponentiate      = TRUE,                           panel.headings    = c(\"\"),                           xlim              = c(0.9, 1.1),                           xticks            = c(0.9, 1, 1.1),                           scalepoints       = TRUE,                           pointsize         = 3,                           printplot         = FALSE) #> Narrow confidence interval lines may become hidden in the forest plot. Please check your final output carefully and see vignette(\"forest_confidence_intervals\") for more details.   # Arrange the plots side-by-side plots <- gridExtra::arrangeGrob(shapeplot$plot, forestplot$plot, nrow = 1)  grid::grid.draw(plots)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"simple-examples-with-a-scatter-plot","dir":"Articles","previous_headings":"","what":"Simple examples with a scatter plot","title":"Make any ggplot like a CKB plot","text":"Make scatter plot ggplot.  Apply just CKB theme use axis lines.  apply plot_like_ckb function add separated axis lines fix aspect ratio.","code":"plot <- ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(size = 1) plot plot + theme_ckb() + theme(axis.line = element_line()) plot_like_ckb(plot = plot)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"axis-limits","dir":"Articles","previous_headings":"Simple examples with a scatter plot","what":"Axis limits","title":"Make any ggplot like a CKB plot","text":"Set axis limits.  want gap axes, set gap = c(0, 0).","code":"plot_like_ckb(plot = plot, xlims = c(0, 8), ylims = c(10, 50)) plot_like_ckb(plot = plot, xlims = c(0, 8), ylims = c(10, 50), gap = c(0, 0))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"aspect-ratio","dir":"Articles","previous_headings":"Simple examples with a scatter plot","what":"Aspect ratio","title":"Make any ggplot like a CKB plot","text":"Change aspect ratio plot.","code":"plot_like_ckb(plot = plot, xlims = c(0, 8), ylims = c(10, 50), ratio = 0.3)"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"modifying-the-appearance-of-the-plot","dir":"Articles","previous_headings":"Simple examples with a scatter plot","what":"Modifying the appearance of the plot","title":"Make any ggplot like a CKB plot","text":"colour arguments theme_ckb() plot_like_ckb() can used change colour non-data components plot.  wish override aspect theme applied plot_like_ckb, can done adding theme function.","code":"plot_like_ckb(plot = plot, xlims = c(0, 8), ylims = c(10, 50), colour = \"darkred\") plot_like_ckb(plot = plot, xlims = c(0, 8), ylims = c(10, 50)) +   theme(axis.title = element_text(colour = \"red\", face = \"plain\"))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"warning-about-axis-limits","dir":"Articles","previous_headings":"Simple examples with a scatter plot","what":"Warning about axis limits","title":"Make any ggplot like a CKB plot","text":"data points plotting fall outside axes, still drawn may show places axes, legend, plot title, plot margins. also warning data points fall outside whole plot area. best check xlim ylim values suitable data using function.","code":"# The xlim and ylim ranges are too narrow plot_like_ckb(plot = plot, xlims = c(0, 4), ylims = c(20, 50))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/plot_like_ckb.html","id":"bar-chart-example","dir":"Articles","previous_headings":"","what":"Bar chart example","title":"Make any ggplot like a CKB plot","text":"","code":"barplot <- ggplot(mpg, aes(class)) + geom_bar() plot_like_ckb(barplot, xlims = c(0.5, 7.5), ylims = c(0, 70), gap = c(0.025, 0.005), ratio = 0.5) +   theme(axis.ticks.x = element_blank())"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_confidence_intervals.html","id":"changing-the-colour","dir":"Articles","previous_headings":"","what":"Changing the colour","title":"Confidence interval lines in shape plots","text":"plot short confidence widths different colour, set panel.height argument shape_plot() equal height panel final drawn output. cicolour argument also character vector - last element used short confidence intervals. use fix_panel() function, first argument plot just created second panel height. function returns gtable object, can plotted using grid::grid.draw (plot()). panel height fixed. Notes: designed work well shape 15 (default) 22. calculation sizes (accounting stroke aesthetic) may entirely accurate, check output change panel.height argument needed. Confidence intervals assumed centred point estimate.  may want adjust position text plotted points, using addaes addarg change vjust values:","code":"shapeplot <- shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],                         col.x        = \"rf\",                         col.estimate = \"est\",                         col.stderr   = \"se\",                         col.n        = \"n\",                         xlims        = c(15, 50),                         ylims        = c(0.7, 3),                         ybreaks      = c(0.7, 1, 1.5, 2, 3),                         scalepoints  = TRUE,                         pointsize    = 9,                         logscale     = TRUE,                         printplot    = FALSE,                         panel.height = 90,                         cicolour     = c(\"black\", \"white\"))  grid::grid.draw(fix_panel(shapeplot$plot,                           height = unit(90, \"mm\"))) shapeplot <- shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],                         col.x        = \"rf\",                         col.estimate = \"est\",                         col.stderr   = \"se\",                         col.n        = \"n\",                         xlims        = c(15, 50),                         ylims        = c(0.7, 3),                         ybreaks      = c(0.7, 1, 1.5, 2, 3),                         scalepoints  = TRUE,                         pointsize    = 15,                         logscale     = TRUE,                         printplot    = FALSE,                         panel.height = 90,                         cicolour     = c(\"black\", \"white\"),                         addaes = list(estimates = \"vjust = - 0.8 - as.numeric(narrowci) * 0.04 / se\",                                       n         = \"vjust = 1.8 + as.numeric(narrowci) * 0.04 / se\"))  grid::grid.draw(fix_panel(shapeplot$plot,                           height = unit(90, \"mm\")))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_confidence_intervals.html","id":"using-groups","dir":"Articles","previous_headings":"","what":"Using groups","title":"Confidence interval lines in shape plots","text":"can use panel.height col.groups (cicolour used ).","code":"data_to_plot <- ckbplotr_shape_data %>%   dplyr::mutate(is_female = factor(is_female,                                    levels = c(0, 1),                                     labels = c(\"Men\", \"Women\")))  shapeplot <- shape_plot(   data_to_plot,   col.x        = \"rf\",   col.estimate = \"est\",   col.stderr   = \"se\",   col.n        = \"n\",   col.group    = \"is_female\",   xlims        = c(15,50),   ylims        = c(0.5, 3),   scalepoints  = TRUE,   pointsize = 15,   printplot    = FALSE,   panel.height = 90,   addaes = list(estimates = \"vjust = - 0.8 - as.numeric(narrowci) * 0.04 / se\",                 n         = \"vjust = 1.8 + as.numeric(narrowci) * 0.04 / se\"),   legend.position = \"bottom\")  grid::grid.draw(fix_panel(shapeplot$plot,                           height = unit(90, \"mm\")))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"log-scale","dir":"Articles","previous_headings":"","what":"Log scale","title":"Shape plots","text":"Set logscale argument true use log scale vertical axis. estimates standard errors log scale (e.g. log hazard ratios), set exponentiate true. plot exp(estimates) use log scale axis (logscale set).","code":"shape_plot(ckbplotr_shape_data[ckbplotr_shape_data$is_female == 0,],            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            xlims        = c(15, 50),            ylims        = c(0.7, 3),            ybreaks      = c(0.7, 1, 1.5, 2, 3),            scalepoints  = TRUE,            title        = NULL,            logscale     = TRUE) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"using-groups","dir":"Articles","previous_headings":"","what":"Using groups","title":"Shape plots","text":"col.group argument can supplied plot results different groups (using shades grey fill colour). Use legend.position set legend position.","code":"data_to_plot <- ckbplotr_shape_data %>%   dplyr::mutate(is_female = factor(is_female,                                    levels = c(0, 1),                                     labels = c(\"Men\", \"Women\")))  shape_plot(data_to_plot,            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            col.group    = \"is_female\",            xlims        = c(15,50),            ylims        = c(0.5, 3),            scalepoints  = TRUE,            title        = NULL,            ciunder      = TRUE,            legend.position = \"bottom\") #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"labelling-groups","dir":"Articles","previous_headings":"Using groups","what":"Labelling groups","title":"Shape plots","text":"label points directly, add geom_text() plot:","code":"shape_plot <- shape_plot(data_to_plot,                          col.x        = \"rf\",                          col.estimate = \"est\",                          col.stderr   = \"se\",                          col.n        = \"n\",                          col.group    = \"is_female\",                          xlims        = c(15,50),                          ylims        = c(0.5, 3),                          scalepoints  = TRUE,                          title        = NULL,                          ciunder      = TRUE,                          legend.position = \"none\",                          printplot    = FALSE) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details.  shape_plot$plot +   geom_text(aes(label = is_female),             hjust = 0,             nudge_x = 2.5,             data = ~ dplyr::group_by(., is_female) %>% dplyr::filter(rf == max(rf)))"},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"adding-lines","dir":"Articles","previous_headings":"","what":"Adding lines","title":"Shape plots","text":"lines argument add lines (linear fit estimates plotted scale, weighted inverse variance) group.","code":"shape_plot(data_to_plot,            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            col.group    = \"is_female\",            xlims        = c(15,50),            ylims        = c(0.5, 3),            scalepoints  = TRUE,            title        = NULL,            ciunder      = TRUE,            lines        = TRUE) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"setting-aesthetics","dir":"Articles","previous_headings":"","what":"Setting aesthetics","title":"Shape plots","text":"shape fill colour points, colour points confidence interval lines can set overall per-point basis. done setting arguments shape, colour, cicolour, fill, ciunder appropriate values, name column containing values point. argument/columns, control, type: (Note approach using columns specify colours shapes package make use automatic scales available ggplot. recommend take look ggplot2 documentation better examples want write ggplot2 code.)","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"using-values","dir":"Articles","previous_headings":"Setting aesthetics","what":"Using values","title":"Shape plots","text":"argument doesn’t match name column data, value used points.","code":"shape_plot(ckbplotr_shape_data,            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            xlims        = c(15,50),            ylims        = c(0.5, 3),            scalepoints  = TRUE,            ciunder      = TRUE,            shape        = 23,            colour       = \"black\",            fill         = \"red\",            cicolour     = \"blue\") #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"using-columns","dir":"Articles","previous_headings":"Setting aesthetics","what":"Using columns","title":"Shape plots","text":"argument matches column name, values column used.","code":"ckbplotr_shape_data$fillcol <- \"black\" ckbplotr_shape_data[ckbplotr_shape_data$is_female == 1,]$fillcol <- \"orange\"  shape_plot(ckbplotr_shape_data,            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            xlims        = c(15,50),            ylims        = c(0.5, 3),            scalepoints  = TRUE,            ciunder      = TRUE,            colour       = \"fillcol\",            fill         = \"fillcol\") #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"categorical-risk-factor","dir":"Articles","previous_headings":"","what":"Categorical risk factor","title":"Shape plots","text":"risk factor can factor. case, x-axis coordinates 1, 2, 3, .. suitable x-axis limits 0.5 number categories plus 0.5. may need add position arguments points, intervals text overlap:","code":"ckbplotr_shape_data$rf <- c(  \"A\",   \"B\",   \"C\",   \"D\", \"A\",   \"B\",   \"C\",  \"D\")  shape_plot(ckbplotr_shape_data,            col.x        = \"rf\",            col.estimate = \"est\",            col.stderr   = \"se\",            col.n        = \"n\",            xlims        = c(0.5, 4.5),            ylims        = c(0.5, 3),            scalepoints  = TRUE,            ciunder      = TRUE,            addarg = list(point     = \"position = position_dodge(width = 0.5)\",                          ci        = \"position = position_dodge(width = 0.5)\",                          n         = \"position = position_dodge(width = 0.5)\",                          estimates = \"position = position_dodge(width = 0.5)\")) #> Narrow confidence interval lines may become hidden in the plot. Please check your final output carefully and see vignette(\"shape_confidence_intervals\") for more details."},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/shape_plot.html","id":"stroke","dir":"Articles","previous_headings":"","what":"Stroke","title":"Shape plots","text":"stroke argument sets stroke aesthetic plotted shapes. See https://ggplot2.tidyverse.org/articles/ggplot2-specs.html details. stroke size adds total size shape, unless stroke = 0 scaling size inverse variance slightly inaccurate (probably important things worry ).","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/special_characters_formatting.html","id":"special-characters","dir":"Articles","previous_headings":"","what":"Special characters","title":"Using special characters and formatting","text":"use special characters, put unicode codepoint text (e.g. \\u2265 greater---equal sign, \\u00B2 superscript 2). forest_plot() row labels need use HTML entities (e.g. &#xb2; superscript 2). work, may need add required ggplot2::geom_text() layer plot manually.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/special_characters_formatting.html","id":"expressions","dir":"Articles","previous_headings":"","what":"Expressions","title":"Using special characters and formatting","text":"ggplot2::geom_text() function argument parse tells ggplot2 parse text expressions display described plotmath. forest_plot(), col.right.parse argument forest_plot() can used choose col.right columns parsed expressions. plot text (col.left) use addarg argument parse text expressions.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/articles/special_characters_formatting.html","id":"ggtext","dir":"Articles","previous_headings":"","what":"ggtext","title":"Using special characters and formatting","text":"ggtext package adds support Markdown HTML plotting text. Row labels forest_plot() already use ggtext::element_markdown(). parts plots, may want add ggtext::geom_richtext() layers include formatted text.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Neil Wright. Author, maintainer.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wright N (2022). ckbplotr: Create CKB Plots. R package version 0.6.6.9000, https://neilstats.github.io/ckbplotr/.","code":"@Manual{,   title = {ckbplotr: Create CKB Plots},   author = {Neil Wright},   year = {2022},   note = {R package version 0.6.6.9000},   url = {https://neilstats.github.io/ckbplotr/}, }"},{"path":"https://neilstats.github.io/ckbplotr/dev/index.html","id":"ckbplotr-","dir":"","previous_headings":"","what":"Create CKB Plots","title":"Create CKB Plots","text":"ckbplotr provides functions help create style plots R. developed , primarily , China Kadoorie Biobank researchers. package development. find error bug suggestion improvement please create issue GitHub contact author neil.wright@ndph.ox.ac.uk @NeilStats. can used : create plots estimates CIs risk factor levels… …create forest plots… …convert ggplots CKB style.","code":""},{"path":[]},{"path":"https://neilstats.github.io/ckbplotr/dev/index.html","id":"from-r-universe","dir":"","previous_headings":"Installation","what":"From R-universe","title":"Create CKB Plots","text":"latest version ckbplotr can installed neilstats R-universe using install.packages(). also install dependencies CRAN repository.","code":"install.packages('ckbplotr',                  repos = c('https://neilstats.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"https://neilstats.github.io/ckbplotr/dev/index.html","id":"from-github","dir":"","previous_headings":"Installation","what":"From github","title":"Create CKB Plots","text":"latest version ckbplotr can also installed github using remotes package.","code":"install.packages('remotes') remotes::install_github('neilstats/ckbplotr')"},{"path":"https://neilstats.github.io/ckbplotr/dev/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Create CKB Plots","text":"Read vignette(\"ckbplotr\") see use shape_plot(), forest_plot(), plot_like_ckb() functions.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/index.html","id":"ggplot2-code","dir":"","previous_headings":"","what":"ggplot2 code","title":"Create CKB Plots","text":"shape_plot() forest_plot() functions return plot ggplot2 code used create plot. RStudio ggplot2 code used create plot shown Viewer pane.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_forest_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic data for demoing forest_plot — ckbplotr_forest_data","title":"Synthetic data for demoing forest_plot — ckbplotr_forest_data","text":"Synthetic data demoing forest_plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_forest_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic data for demoing forest_plot — ckbplotr_forest_data","text":"","code":"ckbplotr_forest_data"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_forest_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic data for demoing forest_plot — ckbplotr_forest_data","text":"object class data.frame 42 rows 12 columns.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_row_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Row labels data for demoing shape_plot — ckbplotr_row_labels","title":"Row labels data for demoing shape_plot — ckbplotr_row_labels","text":"Row labels data demoing shape_plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_row_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row labels data for demoing shape_plot — ckbplotr_row_labels","text":"","code":"ckbplotr_row_labels"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_row_labels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Row labels data for demoing shape_plot — ckbplotr_row_labels","text":"object class data.frame 21 rows 4 columns.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_shape_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic data for demoing shape_plot — ckbplotr_shape_data","title":"Synthetic data for demoing shape_plot — ckbplotr_shape_data","text":"Synthetic data demoing shape_plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_shape_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic data for demoing shape_plot — ckbplotr_shape_data","text":"","code":"ckbplotr_shape_data"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/ckbplotr_shape_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic data for demoing shape_plot — ckbplotr_shape_data","text":"object class data.frame 8 rows 5 columns.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/fix_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix panel width and height of a forest plot — fix_panel","title":"Fix panel width and height of a forest plot — fix_panel","text":"fix_panel fixes panel width height forest plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/fix_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix panel width and height of a forest plot — fix_panel","text":"","code":"fix_panel(plot, width = NULL, height = NULL)"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/fix_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix panel width and height of a forest plot — fix_panel","text":"plot plot (created forest_plot()). width Width panels. (e.g unit(50, \"mm\")) height Height panels. (e.g unit(150, \"mm\"))","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/fix_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix panel width and height of a forest plot — fix_panel","text":"gtable object","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares data set for a forest plot — forest_data","title":"Prepares data set for a forest plot — forest_data","text":"Prepares data set forest plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares data set for a forest plot — forest_data","text":"","code":"forest_data(   panels,   col.key = \"key\",   row.labels = NULL,   row.labels.levels = c(\"heading1\", \"heading2\", \"heading3\"),   rows = NULL,   panel.names = NULL,   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.left = NULL,   col.right = NULL,   col.keep = NULL,   ci.delim = \", \",   digits = 2,   exponentiate = TRUE,   blankrows = c(1, 1, 0, 0),   scalepoints = FALSE,   minse = NULL,   addtext = NULL,   cols = panels,   headings = NULL,   colnames = NULL )  make_forest_data(   panels,   col.key = \"key\",   row.labels = NULL,   row.labels.levels = c(\"heading1\", \"heading2\", \"heading3\"),   rows = NULL,   panel.names = NULL,   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.left = NULL,   col.right = NULL,   col.keep = NULL,   ci.delim = \", \",   digits = 2,   exponentiate = TRUE,   blankrows = c(1, 1, 0, 0),   scalepoints = FALSE,   minse = NULL,   addtext = NULL,   cols = panels,   headings = NULL,   colnames = NULL )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares data set for a forest plot — forest_data","text":"panels list data frames. include columns point estimates, standard errors confidence interval limits. specify row.labels data frame, must also contain key column name (can specified col.key). col.key Name column links results given data frame provided panels labels given row.labels. row.labels data frame given, column used row labels. (Default: \"key\") row.labels data frame contains labels used rows plot. Use NA lower level heading required given row. row.labels.levels character vector length 3. names columns row.labels use headings/subheadings/labels labelling rows. (Default: c(\"heading1\", \"heading2\", \"heading3\")) rows character vector. top level labels rows included plot. panel.names character vector. names used forest plot panel. none provided, numbered 1, 2, 3 ... col.estimate Name column provides point estimates. (Default: \"estimate\") col.stderr Name column provides standard errors. (Default: \"stderr\") col.lci Name column provides lower limit confidence intervals. col.uci Name column provides upper limit confidence intervals. col.left Names columns printed left plot. col.right Names columns printed right plot. col.keep Names additional columns kept returned data frame. ci.delim Character string separate lower upper limits confidence interval. (Default: \", \") digits Number digits decimal point show estimates confidence intervals. (Default: 2) exponentiate Exponentiate estimates (CIs) plotting. (Default: TRUE) blankrows numeric vector length 4 specifying number blank rows heading1, end heading1 'section', heading2, end heading2 'section. (Default: c(1, 1, 0, 0)) scalepoints points scaled inverse standard error? (Default: FALSE) minse Minimum standard error use scaling point size. (Default use minimum data.) addtext list data frames. List must length panels. Data frames contain column name specified col.key, one : column named 'text' containing character strings columns named 'het_dof', 'het_stat', 'het_p' containing character strings columns names 'trend_stat' 'trend_p' containing character strings character strings, heterogeneity test, trend test results plotted column estimates CIs, row key given col.key column. cols DEPRECATED. headings DEPRECATED. colnames DEPRECATED.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares data set for a forest plot — forest_data","text":"dataset forest plot can generated.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_data.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Prepares data set for a forest plot — forest_data","text":"make_forest_data(): Synonym forest_data()","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a forest plot with ggplot2 — forest_plot","title":"Make a forest plot with ggplot2 — forest_plot","text":"Creates forest plot ggplot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a forest plot with ggplot2 — forest_plot","text":"","code":"forest_plot(   panels,   row.labels = NULL,   row.labels.levels = c(\"heading1\", \"heading2\", \"heading3\"),   rows = NULL,   exponentiate = TRUE,   logscale = exponentiate,   panel.names = NULL,   panel.headings = panel.names,   col.key = \"key\",   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.left = NULL,   col.right = NULL,   col.right.parse = FALSE,   col.left.heading = \"\",   col.right.heading = \"HR (95% CI)\",   col.left.pos = NULL,   col.right.pos = NULL,   col.left.hjust = 1,   col.right.hjust = 0,   col.heading.space = 0,   estcolumn = TRUE,   col.keep = NULL,   ci.delim = \", \",   digits = 2,   title = \"\",   xlab = \"HR (95% CI)\",   xlim = NULL,   xticks = NULL,   nullval = NULL,   blankrows = c(1, 1, 0, 0),   col.diamond = NULL,   diamond = NULL,   col.bold = NULL,   bold.labels = NULL,   scalepoints = FALSE,   minse = NULL,   pointsize = 3,   shape = NULL,   plotcolour = \"black\",   colour = NULL,   cicolour = colour,   fill = NULL,   ciunder = NULL,   addtext = NULL,   bottom.space = 0.7,   left.space = NULL,   right.space = NULL,   mid.space = unit(5, \"mm\"),   plot.margin = margin(8, 8, 8, 8, \"mm\"),   panel.width = NULL,   base_size = 11,   base_line_size = base_size/22,   stroke = 0,   printplot = TRUE,   showcode = TRUE,   addcode = NULL,   addaes = NULL,   addarg = NULL,   envir = NULL,   cols = panels,   headings = NULL,   colnames = NULL,   colheadings = colnames,   boldheadings = NULL,   heading.space = NULL,   panel.space = NULL,   label.space = NULL,   plot.space = NULL,   col.right.space = NULL,   col.left.space = NULL,   margin = NULL,   units = NULL )  make_forest_plot(   panels,   row.labels = NULL,   row.labels.levels = c(\"heading1\", \"heading2\", \"heading3\"),   rows = NULL,   exponentiate = TRUE,   logscale = exponentiate,   panel.names = NULL,   panel.headings = panel.names,   col.key = \"key\",   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.left = NULL,   col.right = NULL,   col.right.parse = FALSE,   col.left.heading = \"\",   col.right.heading = \"HR (95% CI)\",   col.left.pos = NULL,   col.right.pos = NULL,   col.left.hjust = 1,   col.right.hjust = 0,   col.heading.space = 0,   estcolumn = TRUE,   col.keep = NULL,   ci.delim = \", \",   digits = 2,   title = \"\",   xlab = \"HR (95% CI)\",   xlim = NULL,   xticks = NULL,   nullval = NULL,   blankrows = c(1, 1, 0, 0),   col.diamond = NULL,   diamond = NULL,   col.bold = NULL,   bold.labels = NULL,   scalepoints = FALSE,   minse = NULL,   pointsize = 3,   shape = NULL,   plotcolour = \"black\",   colour = NULL,   cicolour = colour,   fill = NULL,   ciunder = NULL,   addtext = NULL,   bottom.space = 0.7,   left.space = NULL,   right.space = NULL,   mid.space = unit(5, \"mm\"),   plot.margin = margin(8, 8, 8, 8, \"mm\"),   panel.width = NULL,   base_size = 11,   base_line_size = base_size/22,   stroke = 0,   printplot = TRUE,   showcode = TRUE,   addcode = NULL,   addaes = NULL,   addarg = NULL,   envir = NULL,   cols = panels,   headings = NULL,   colnames = NULL,   colheadings = colnames,   boldheadings = NULL,   heading.space = NULL,   panel.space = NULL,   label.space = NULL,   plot.space = NULL,   col.right.space = NULL,   col.left.space = NULL,   margin = NULL,   units = NULL )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a forest plot with ggplot2 — forest_plot","text":"panels list data frames. include columns point estimates, standard errors confidence interval limits. specify row.labels data frame, must also contain key column name (can specified col.key). row.labels data frame contains labels used rows plot. Use NA lower level heading required given row. row.labels.levels character vector length 3. names columns row.labels use headings/subheadings/labels labelling rows. (Default: c(\"heading1\", \"heading2\", \"heading3\")) rows character vector. top level labels rows included plot. exponentiate Exponentiate estimates (CIs) plotting. (Default: TRUE) logscale Use log scale axis, add line null effect. (Default: exponentiate) panel.names character vector. names used forest plot panel. none provided, numbered 1, 2, 3 ... panel.headings Titles placed forest plot. (Default: panel.names) col.key Name column links results given data frame provided panels labels given row.labels. row.labels data frame given, column used row labels. (Default: \"key\") col.estimate Name column provides point estimates. (Default: \"estimate\") col.stderr Name column provides standard errors. (Default: \"stderr\") col.lci Name column provides lower limit confidence intervals. col.uci Name column provides upper limit confidence intervals. col.left Names columns printed left plot. col.right Names columns printed right plot. col.right.parse logical vector, length col.right (+ 1 estcolumn = TRUE). contents columns parsed expressions. (Default: FALSE) col.left.heading character vector titles col.left columns. (Default: \"\") col.right.heading character vector titles column estimates (estcolumn = TRUE) col.right columns. (Default: \"HR (95% CI)\") col.left.pos unit vector position col.right columns. col.right.pos unit vector position col.right columns. col.left.hjust numeric vector. horizontal justification col.left columns. (Default: 1) col.right.hjust numeric vector. horizontal justification col.right columns. (Default: 0) col.heading.space Position titles given col.left.heading col.right.heading. Increase move . (Default: 0) estcolumn Include column estimates confidence intervals right plot. (Default: TRUE) col.keep Names additional columns kept returned data frame. ci.delim Character string separate lower upper limits confidence interval. (Default: \", \") digits Number digits decimal point show estimates confidence intervals. (Default: 2) title Title appear top plot. xlab Label appear x-axis. (Default: \"HR (95% CI)\") xlim numeric vector. limits x axis. xticks numeric vector. tick points x axis. nullval Add vertical reference line value. (logscale == TRUE default added 1, use NA plot line.) blankrows numeric vector length 4 specifying number blank rows heading1, end heading1 'section', heading2, end heading2 'section. (Default: c(1, 1, 0, 0)) col.diamond Plot estimates CIs diamonds. Name column logical values. diamond Alternative col.diamond. character vectors identify rows (using key values) estimate CI plotted using diamond. col.bold Plot text bold. Name column logical values. bold.labels character vector identifying row labels (using key values) additionally bold. (Default: NULL) scalepoints points scaled inverse standard error? (Default: FALSE) minse Minimum standard error use scaling point size. (Default use minimum data.) pointsize (largest) size box use plotting point estimates. (Default: 3) shape Shape points. integer, name column integers. (Default use shape 22 - squares fill.) plotcolour Colour parts plot. (Default: \"black\") colour Colour points. Name colour, name column colour names. (Default use plotcolour.) cicolour Colour CI lines. Colour CI lines. Name colour, name column colour names. (Default use plotcolour.) fill Fill colour points. Fill colour points. Name colour, name column colour names. (Default use plotcolour.) ciunder Plot CI lines points. logical value, name column logical values. (Default plot CI lines points.) addtext list data frames. List must length panels. Data frames contain column name specified col.key, one : column named 'text' containing character strings columns named 'het_dof', 'het_stat', 'het_p' containing character strings columns names 'trend_stat' 'trend_p' containing character strings character strings, heterogeneity test, trend test results plotted column estimates CIs, row key given col.key column. bottom.space Size space bottom row axis. (Default: 0.7) left.space Size gap leave left panels. right.space Size gap leave right panels. mid.space Size additional gap leave panels. (Default: unit(5, \"mm\")) plot.margin Plot margin, given margin(top, right, bottom, left, units). (Default: margin(8, 8, 8, 8, \"mm\")) panel.width Panel width assume apply different formatting narrow CIs. Unit \"mm\". base_size base font size, given pts. base_line_size base size line elements stroke Size outline shapes. (Default: 0) printplot Print plot. (Default: TRUE) showcode Show ggplot2 code generate plot RStudio 'Viewer' pane. (Default: TRUE) addcode character vector code add generated code. first element regular expression. remaining elements added generated code just first match line (trimmed  whitespace) regular expression. (Default: NULL) addaes Specify additional aesthetics ggplot layers. addarg Specify additional arguments ggplot layers. envir Environment evaluate plot code. May useful calling function inside another function. cols DEPRECATED. headings DEPRECATED. colnames DEPRECATED. colheadings DEPRECATED. boldheadings DEPRECATED. heading.space DEPRECATED. Even older method specifying spacing. panel.space DEPRECATED. Old method specifying spacing. label.space DEPRECATED. Old method specifying spacing. plot.space DEPRECATED. Even older method specifying spacing. col.right.space DEPRACTED col.left.space DEPRACTED margin DEPRECATED. Old method specifying margins. units DEPRECATED","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a forest plot with ggplot2 — forest_plot","text":"list: plot plot code ggplot2 code generate plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a forest plot with ggplot2 — forest_plot","text":"function returns plot ggplot2 code create plot. RStudio, ggplot2 code shown viewer.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/forest_plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Make a forest plot with ggplot2 — forest_plot","text":"make_forest_plot(): Synonym forest_plot()","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/geom_text_move.html","id":null,"dir":"Reference","previous_headings":"","what":"Text that can be moved — geom_text_move","title":"Text that can be moved — geom_text_move","text":"geom adds fixed horizontal /vertical move ggplot2::geom_text()","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/geom_text_move.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text that can be moved — geom_text_move","text":"","code":"geom_text_move(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   parse = FALSE,   nudge_x = 0,   nudge_y = 0,   move_x = unit(0, \"pt\"),   move_y = unit(0, \"pt\"),   check_overlap = FALSE,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/geom_text_move.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text that can be moved — geom_text_move","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. jointy specified nudge_x nudge_y. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat. parse TRUE, labels parsed expressions displayed described ?plotmath. nudge_x, nudge_y Horizontal vertical adjustment nudge labels . Useful offsetting text points, particularly discrete scales. jointly specified position. move_x Unit value move text horizontally (Default: unit(0, \"pt\")) move_y Unit value move text vertically (Default: unit(0, \"pt\")) check_overlap TRUE, text overlaps previous text layer plotted. check_overlap happens draw time order data. Therefore data arranged label column calling geom_text(). Note argument supported geom_label(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/geom_text_move.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Text that can be moved — geom_text_move","text":"geom_text_move() understands aesthetics ggplot2::geom_text()","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/plot_like_ckb.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a ggplot into CKB style — plot_like_ckb","title":"Make a ggplot into CKB style — plot_like_ckb","text":"Make ggplot CKB style","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/plot_like_ckb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a ggplot into CKB style — plot_like_ckb","text":"","code":"plot_like_ckb(   plot,   xlims = NULL,   ylims = NULL,   gap = c(0.025, 0.025),   ext = c(0, 0),   ratio = 1.5,   base_size = 11,   base_line_size = base_size/22,   colour = \"black\" )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/plot_like_ckb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a ggplot into CKB style — plot_like_ckb","text":"plot ggplot2 plot object. xlims numeric vector length two. limits x-axis. ylims numeric vector length two. limits y-axis. gap numeric vector length two. gap plotting area axis left bottom plot, proportion x-axis length. (Default: c(0.025, 0.025)) ext numeric vector length two. extensions add right top plot, proportion x-axis length. (Default: c(0, 0)) ratio ratio (y-axis:x-axis) use plot. (Default: 1.5) base_size base font size, given pts. base_line_size base size line elements colour Colour non-data aspects plot. (Default: \"black\")","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/plot_like_ckb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a ggplot into CKB style — plot_like_ckb","text":"ggplot2 plot.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/save_figure.html","id":null,"dir":"Reference","previous_headings":"","what":"Output plots as files — save_figure","title":"Output plots as files — save_figure","text":"Output plots files","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/save_figure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output plots as files — save_figure","text":"","code":"save_figure(   figure,   name,   title = \"\",   title.pos = grid::unit.c(unit(1.27/2, \"cm\"), unit(1, \"npc\") - unit(1.27/2, \"cm\")),   title.just = c(0, 1),   title.gpar = list(fontsize = 12, fontface = \"bold\"),   footer = \"\",   footer.pos = grid::unit.c(unit(1.27/2, \"cm\"), unit(1.27/3, \"cm\")),   footer.just = c(0, 0),   footer.gpar = list(fontsize = 9),   margin = unit(c(2.27, 1.27, 1.27, 1.27), units = \"cm\"),   size = NULL,   pagesize = c(\"A4\", \"A5\"),   landscape = FALSE,   pagedim = NULL,   cropped = FALSE )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/save_figure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output plots as files — save_figure","text":"figure Plot (graphical object). name Name figure. Used name output file(s) embedded PDF document properties Title field. title Title added page. (Default: \"\") title.pos Position title text. Default 1/4 inch top left page. (Default: unit.c(unit(1.27/2, \"cm\"), unit(1, \"npc\") - unit(1.27/2, \"cm\"))) title.just Justification title text. (Default: c(0, 1)) title.gpar Graphical parameters title. (Default: list(fontsize = 12, fontface = \"bold\")) footer Footer added page. (Default: \"\") footer.pos Position footer text. Default 1/6 inch bottom 1/4 inch left page. (Default: unit.c(unit(1.27/2, \"cm\"), unit(1.27/3, \"cm\"))) footer.just Justification footer text. (Default: c(0, 0)) footer.gpar Graphical parameters footer. (Default: list(fontsize = 9)) margin Margin placed around plot. Default 2.27cm top, 1.27cm (1/2 inch) sides. (Default: unit(c(2.27, 1.27, 1.27, 1.27), units = \"cm\")) size unit vector length two (width, height). Size plot (width/height larger page weight/height minus margins ignored), centred within margins. default, plot fill space within margins. pagesize Page size PDF output: \"A4\" \"A5\". (Default: \"A4\") landscape Landscape page orientation? (Default: False) pagedim Dimensions (width, height) PDF output. Overrides pagesize landscape arguments used. cropped Create PNG output figure without margins title. (Default: False)","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/shape_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a shape plot with ggplot2 — shape_plot","title":"Make a shape plot with ggplot2 — shape_plot","text":"Make shape plot ggplot2","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/shape_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a shape plot with ggplot2 — shape_plot","text":"","code":"shape_plot(   data,   col.x = \"x\",   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.n = NULL,   exponentiate = FALSE,   logscale = exponentiate,   scalepoints = FALSE,   minse = NA,   pointsize = 3,   col.group = NULL,   shape = NULL,   plotcolour = \"black\",   colour = NULL,   cicolour = colour,   fill = NULL,   ciunder = NULL,   lines = FALSE,   xlims,   ylims,   panel.height = NULL,   gap = c(0.025, 0.025),   ext = c(0.025, 0.025),   ratio = 1.5,   base_size = 11,   base_line_size = base_size/22,   stroke = base_size/22,   xbreaks = NULL,   ybreaks = NULL,   xlab = \"Risk factor\",   ylab = \"Estimate (95% CI)\",   legend.name = \"\",   legend.position = \"top\",   title = NULL,   printplot = TRUE,   showcode = TRUE,   addcode = NULL,   addaes = NULL,   addarg = NULL,   envir = NULL )  make_shape_plot(   data,   col.x = \"x\",   col.estimate = \"estimate\",   col.stderr = \"stderr\",   col.lci = NULL,   col.uci = NULL,   col.n = NULL,   exponentiate = FALSE,   logscale = exponentiate,   scalepoints = FALSE,   minse = NA,   pointsize = 3,   col.group = NULL,   shape = NULL,   plotcolour = \"black\",   colour = NULL,   cicolour = colour,   fill = NULL,   ciunder = NULL,   lines = FALSE,   xlims,   ylims,   panel.height = NULL,   gap = c(0.025, 0.025),   ext = c(0.025, 0.025),   ratio = 1.5,   base_size = 11,   base_line_size = base_size/22,   stroke = base_size/22,   xbreaks = NULL,   ybreaks = NULL,   xlab = \"Risk factor\",   ylab = \"Estimate (95% CI)\",   legend.name = \"\",   legend.position = \"top\",   title = NULL,   printplot = TRUE,   showcode = TRUE,   addcode = NULL,   addaes = NULL,   addarg = NULL,   envir = NULL )"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/shape_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a shape plot with ggplot2 — shape_plot","text":"data data frame containing estimates plotted. col.x Name column provides x-axis value (e.g. exposure, risk factor, dependent variable). (Default: \"x\") col.estimate Name column provides point estimates. (Default: \"estimate\") col.stderr Name column provides standard errors. (Default: \"stderr\") col.lci Name column provides lower limit confidence intervals. col.uci Name column provides upper limit confidence intervals. col.n Name column provides number plotted CIs. exponentiate Exponentiate estimates (CIs) plotting, use log scale axis. (Default: FALSE) logscale Use log scale vertical axis. (Default: exponentiate) scalepoints points scaled inverse standard error? (Default: FALSE) minse Minimum standard error use scaling point size. (Default use minimum data.) pointsize (largest) size box use plotting point estimates. (Default: 3) col.group Name column groups estimates. (Default: NULL) shape Shape points. integer, name column integers. (Default use shape 22 - squares fill.) plotcolour Colour non-data aspects plot. (Default: \"black\") colour Colour points. Name colour, name column colour names. (Default use plotcolour) cicolour Colour CI lines. Colour CI lines. Name colour, name column colour names. (Default use plotcolour) fill Fill colour points. Fill colour points. Name colour, name column colour names. (Default use plotcolour) ciunder Plot CI lines points. logical value, name column logical values. (Default plot CI lines points.) lines Plot lines (linear fit estimates, weighted inverse variance). (Default: FALSE) xlims numeric vector length two. limits x-axis. ylims numeric vector length two. limits y-axis. panel.height Panel height assume apply different formatting short CIs. Unit \"mm\". gap numeric vector length two. gap plotting area axis left bottom plot, proportion x-axis length. (Default: c(0.025, 0.025)) ext numeric vector length two. extensions add right top plot, proportion x-axis length. (Default: c(0.025, 0.025)) ratio ratio (y-axis:x-axis) use plot. (Default: 1.5) base_size base font size, given pts. base_line_size base size line elements stroke Size outline shapes. (Default: base_size/22) xbreaks Breaks x axis. Passed ggplots::scale_x_continuous. (Default: NULL) ybreaks Breaks y axis. Passed ggplots::scale_y_continuous. (Default: NULL) xlab Label x-axis. (Default: \"Risk factor\") ylab Label y-axis. (Default: \"Estimate (95% CI)\") legend.name name colour scale/legend groups. (Default: \"\") legend.position Position legend groups (\"none\", \"left\", \"right\", \"bottom\", \"top\", two-element numeric vector). (Default: \"top\") title Plot title. (Default: NULL) printplot Print plot. (Default: TRUE) showcode Show ggplot2 code generate plot RStudio 'Viewer' pane. (Default: TRUE) addcode character vector code add generated code. first element regular expression. remaining elements added generated code just first match line (trimmed  whitespace) regular expression. (Default: NULL) addaes Specify additional aesthetics ggplot layers. addarg Specify additional arguments ggplot layers. envir Environment evaluate plot code. May useful calling function inside another function.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/shape_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a shape plot with ggplot2 — shape_plot","text":"list: plot plot code ggplot2 code generate plot","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/shape_plot.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Make a shape plot with ggplot2 — shape_plot","text":"make_shape_plot(): Synonym shape_plot()","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/theme_ckb.html","id":null,"dir":"Reference","previous_headings":"","what":"CKB ggplot theme — theme_ckb","title":"CKB ggplot theme — theme_ckb","text":"Based theme_bw","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/theme_ckb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CKB ggplot theme — theme_ckb","text":"","code":"theme_ckb(base_size = 11, base_line_size = base_size/22, colour = \"black\")"},{"path":"https://neilstats.github.io/ckbplotr/dev/reference/theme_ckb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CKB ggplot theme — theme_ckb","text":"base_size base font size, given pts. base_line_size base size line elements colour Colour non-data aspects plot. (Default: \"black\")","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-0669000","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.6.9000","title":"ckbplotr 0.6.6.9000","text":"Added save_figure() function help save plots PDF files. make_shape_plot() now called shape_plot() make_forest_plot() now called forest_plot(). (original names still work.) forest_plot(), fill cicolour (using panel.width) can now lists. shape_plot(), confidence intervals shorter plotted points can different colour (plotted /points) using panel.height argument. plot_like_ckb() now removes panel background puts small top margin plot. Added gridtext version requirement (>=0.1.5) text formatting works R versions >= 4.2.0 . Internal changes made improve structure. minor fixes updates.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-066","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.6","title":"ckbplotr 0.6.6","text":"make_forest_plot() addtext argument can now add multiple tests results /text row. README updated.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-065","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.5","title":"ckbplotr 0.6.5","text":"Added arguments control colour non-data components plot. Use R markdown render plot code display Viewer pane RStudio. (Replacing use highlight package.) Updates vignettes.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-064","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.4","title":"ckbplotr 0.6.4","text":"Added legend.name legend.position arguments make_shape_plot(). Added DOI badge R-universe installation instructions. Updated license (add ggplot2 reference)","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-063","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.3","title":"ckbplotr 0.6.3","text":"Removed make_jasper_forest_plot function. Minor improvements make_forest_plot().","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-062","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.2","title":"ckbplotr 0.6.2","text":"Allow use vectors col.left col.right addaes addarg arguments. (different aesthetics arguments can added column.) Add digits argument make_forest_data() make_forest_plot(). make_forest_plot() report results automatic horizontal column positioning spacing. Various minor fixes.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-061","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.1","title":"ckbplotr 0.6.1","text":"Fixes","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-060","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.6.0","title":"ckbplotr 0.6.0","text":"New spacing column positioning arguments added make_forest_plot(). default, calculated automatically. New argument addcode make_forest_plot() inserts code generated plot code. New arguments addaes addarg make_shape_plot() make_forest_plot() can used specify additional aesthetics arguments ggplot layers. New argument col.right.parse make_forest_plot() controls columns parsed expressions plotted. New argument row.labels.levels make_forest_plot() make_forest_data() specify columns row.labels data frame use. better handling missing values. make_forest_plot() longer returns data. plot data available .$plot$data New argument envir added make_shape_plot (allows user specify environment evaluating plot code). ggtext::element_markdown() now used y-axis labels make_forest_plot() fix_panel_width() replaced fix_panel() Improved handling unicode characters. Updated documentation. Fixes internal code improvements.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-050","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.5.0","title":"ckbplotr 0.5.0","text":"make_forest_plot(), confidence intervals narrower plotted points can different colour (plotted /points) using panel.width argument. new function fix_panel_width() can used fix width panels forest plot. new argument envir make_forest_plot() allows user specify environment evaluating plotcode. (Helpful using make_forest_plot() inside another function.)","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-041","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.4.1","title":"ckbplotr 0.4.1","text":"Fixed make_jasper_forest_plot.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-040","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.4.0","title":"ckbplotr 0.4.0","text":"Name arguments make_forest_plot(), make_forest_data(), make_jasper_forest_plot() changed. old names still work now message displayed tell new names. Hopefully new names meaningful. code returned make_forest_plot() now run entirely editing. (.e. includes code prepare data plotting, need run make_forest_plot() work.) Use coord_flip() removed make_forest_plot(), x y switched needed. x positions axis labels, text columns, panel headings make_forest_plot() rounded six decimal places. Point estimates CIs outside axis limits plotted make_forest_plot().","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-032","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.3.2","title":"ckbplotr 0.3.2","text":"Arguments col.right.headings col.left.headings make_forest_plot now accept lists, different headings can used plots.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-031","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.3.1","title":"ckbplotr 0.3.1","text":"New argument stroke make_shape_plot make_forest_plot. New argument nullval make_forest_plot, adds vertical reference line value. (default line still added 1 using log scale.) New argument minse make_shape_plot make_forest_plot sets minimum standard error use scaling point size. allows scaling made consistent plots. Argument col.keep available make_forest_plot() keep columns returned data frame. Using addtext argument make_forest_plot(), now need include equals less sign p-value.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-030","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.3.0","title":"ckbplotr 0.3.0","text":"New arguments setting aesthetics overall (value) per-point (specifying column name). Size text lines etc. can controlled base_size base_line_size. Fitted lines can added shape plots lines argument. Log scale plots can controlled logscale argument. Added vignettes improved documentation. small fixes.","code":""},{"path":"https://neilstats.github.io/ckbplotr/dev/news/index.html","id":"ckbplotr-020","dir":"Changelog","previous_headings":"","what":"ckbplotr 0.2.0","title":"ckbplotr 0.2.0","text":"Update version number changes backwards compatible may introduced. Added NEWS.md file track changes package.","code":""}]
